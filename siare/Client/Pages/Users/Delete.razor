@page "/users/delete/{UserId}"
@using siare.Shared.Entities
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1>Delete User</h1>

@if (user == null)
{
  <p><em>Loading...</em></p>
}
else if (errorMessage != null)
{
  <p><em>Error: @errorMessage</em></p>
}
else
{
  <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label for="userid">User ID:</label>
    <InputNumber id="userid" @bind-Value="@user.UserId" class="form-control" disabled />
    <label for="username">Username:</label>
    <InputText id="username" @bind-Value="@user.Username" class="form-control" disabled />
    <label for="password">Password:</label>
    <InputText id="password" @bind-Value="@user.PasswordHash" class="form-control" disabled />
    <label for="salt">Salt:</label>
    <InputText id="salt" @bind-Value="@user.Salt" class="form-control" disabled />
    <label for="email">Email:</label>
    <InputText id="email" @bind-Value="@user.Email" class="form-control" disabled />

    <button type="submit" class="btn btn-primary">Delete</button>
    <button class="btn btn-secondary" @onclick="GoBack">Go Back</button>
  </EditForm>
}

@code {
  [Parameter]
  public string? UserId { get; set; }

  private User? user;
  private string? errorMessage;

  protected override async Task OnInitializedAsync()
  {
    user = await Http.GetFromJsonAsync<User>($"api/Users/{UserId}");
  }

  private async Task HandleValidSubmit()
  {
    // JavaScriptのconfirm()関数を呼び出して削除の確認を取る
    var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");

    if (confirmed)
    {
      try
      {
        var response = await Http.DeleteAsync($"api/Users/{user?.UserId}");
        if (response.IsSuccessStatusCode)
        {
          // Redirect to users list or show success message
          NavigationManager.NavigateTo("/users");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
          // Show bad request error message
          errorMessage = "Bad Request Error. Please check your input.";
        }
        else
        {
          // Show other error messages
          errorMessage = "Error deleting the user. Please try again later.";
        }
      }
      catch (Exception ex)
      {
        // Handle other errors
        errorMessage = $"Exception: {ex.Message}";
      }
    }
  }

  private void GoBack()
  {
    NavigationManager.NavigateTo("/users");
  }
}
